'micro(A) Interpreter - with recursive descent token evaluator
'3 PASS processing -> tokenizer,parser,executor
'public artistic licence ,copyright (c)AurelSoft
' by Aurel - last update: 1.4.2022
$ filename "microA_Interpreter.exe"                 'compiled to exe
include "RTL32.inc"
include "awinh037.inc"                              ' awinh GUI api function
include "microAT.inc"                               ' tokenizer include
#lookahead
int tc=0 , ierror=0                                 ' token count, interpreting  error
string token : int tkTyp                            ' define  token as STRING : tkType as INT
string DQ = chr(34)                                 ' DQ as double quote "
sys sys_mode=3
Declare Function SetPixelV Lib "gdi32.dll" (ByVal hdc As sys, ByVal x As Long, ByVal y As Long, ByVal crColor As Long) As Long
Declare Function SetStretchBltMode Lib "gdi32.dll" (ByVal hdc As sys, ByVal nStretchMode As Long) As Long
Declare Function StretchBlt        Lib "gdi32.dll" (ByVal hdc As sys, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hSrcDC As sys, ByVal xSrc As Long, ByVal ySrc As Long, ByVal nSrcWidth As Long, ByVal nSrcHeight As Long, ByVal dwRop As Long) As Long
'*********************************************************************
'globals -> window size 
INT win,x=0,y=0, w = 800, h = 600 ,wstyle = WS_MINMAXSIZE
INT button0,b0ID=100
SYS fseed = 0x12345678 ' seed number
NumberFormat 6,1,0,0,0,0
' global HDC and on screen functions.........................................................
PAINTSTRUCT ps
INT hdc, hdcMem, hdcImg, hbmMem, ww, wh, oldBmp, oldBrush, oldPen, oldFont, fColor,bColor ,selBmp, hImg
INT np, op, nB, oB ,cix ,ciy, cra 
int msgQuit=0
'Interpreter Globals .........................................................................
string kwList[64]   'keyword list 
kwList[1] ="VAR" : kwList[2] = "STR" : kwList[3] = "PTR" : kwList[4] = "IF" : kwList[5] = "ELSE" : kwList[6] = "ENDIF"
kwList[7] ="WHILE" : kwList[8] = "WEND" : kwList[9] = "FOR" : kwList[10] = "TO" : kwList[11] = "STEP" : kwList[12] = "NEXT"
kwList[13]="PRINT" : kwList[14]="STRS" : kwList[15]="VAL" :  kwList[16]="LABEL" :  kwList[17]="GOTO" 
kwList[18]="WCOLOR" : kwList[19]="FCOLOR" : kwList[20]="BCOLOR" : kwList[21]="PSET": kwList[22]="CIRCLE" : kwList[23]="RECT" 
kwList[24]="LINE" : kwList[25]="RND" : kwList[26]="SIN" : kwList[27]="COS": kwList[28]="TAN" :kwList[29]="SWAP" :kwList[30]="RAND"
kwList[31]="ABS" : kwList[32]="ATAN" : kwList[33]="SQR" : kwList[34]="LOG" : kwList[35]="ROUND" : kwList[36]="INT"
kwList[37]="FUNC" : kwList[38]="ENDFN" : kwList[39]="FRAC" : kwList[40]="WINMSG" : kwList[41]="ENDWM" 
kwList[42]="MOUSEX" : kwList[43]="MOUSEY" : kwList[44]="HWPARAM" :  kwList[45]="HLPARAM" '46,47,48,49,50
kwList[51]="LOADIMG" :kwList[52]="SHOWIMG" : kwList[53]="SHOWIMGT"
kwList[60]="MSTR" :kwList[61]="LSTR" : kwList[62]="RSTR"

'..............................................................................................
int tkSTRING = 32, tkFLOAT = 33 , tkPOINTER = 34 , tkIF = 35 , tkELSE = 36, tkENDIF = 37
int tkWHILE = 38, tkWEND = 39 , tkFOR = 40 , tkTO = 41 , tkSTEP = 42 , tkNEXT = 43
int tkPRINT = 44 , tkSTRS = 45, tkVAL = 46, tkLABEL = 47, tkGOTO = 48 ,tkPSET = 49, tkRND = 50, tkWCOLOR = 51
int tkSIN = 52, tkCOS = 53, tkTAN = 54, tkFCOLOR = 55, tkBCOLOR = 56 , tkCIRCLE = 57, tkRECT=58, tkLINE = 59,tkSWAP=60
int tkRAND = 61 ,tkABS = 62, tkATAN = 63, tkSQR = 64, tkLOG = 65, tkROUND = 66, tkINT = 67
int tkFUNC = 68, tkENDFN = 69 ,tkFRAC = 70, tkWINMSG = 71,tkENDWM = 72, tkMOUSEX = 73, tkMOUSEY = 74
int tkHWPARAM = 75, tkHLPARAM = 76 ' 77,78,79,90
int tkLOADIMG = 91,tkSHOWIMG = 92,tkSHOWIMGT = 93
int tkMIDSTR = 100, tkLEFTSTR = 101 , tkRIGHTSTR = 102

'Global Variable,function,ID etc array ................................................................
int varID = 0, fnID=0
int varList[1024] : int varType[1024] :string varName[1024]: string varStr[1024] : float varNum[1024] : int varPtr[1024]
int fnList[1024]  : int fnType[1024]  :string  fnName[1024]                         'functions
'arrays ..for now 8 for each type ........................................................................
int arrayID[1024]         'array ID -> hold array index(identifier)
'string arrayName[1024]   'array stack hold array name 
'int    arrayType[1024]   'array type 1->var , 2->str ,3-ptr
'int    arraySize[1024]   'array size
'int    arrayIndex[1024]  'array Index/element -> hold array index/element
float  arr01[4096],arr02[4096],arr03[4096],arr04[4096],arr05[4096],arr06[4096],arr07[4096],arr08[4096]

string arr01[4096],arr02[4096],arr03[4096],arr04[4096],arr05[4096],arr06[4096],arr07[4096],arr08[4096]

int    arr01[4096],arr02[4096],arr03[4096],arr04[4096],arr05[4096],arr06[4096],arr07[4096],arr08[4096]

int ifCounter=0, endifCounter=0, whileCounter=0,wendCounter=0 ,forCounter=0,nextCounter=0
int prX,prY,prZ,piX,piY,piZ,piQ ,backBlue,backGreen,backRed, winBlue, winGreen, winRed
int frontRed,frontGreen,frontBlue, lineX1,lineY1,lineX2,lineY2
string prStr ' for print
int vYES=1, vNO = 0                            ' for if
int hMouseX,hMouseY                            ' for mouse pointer coordinate
int hWParam,hLParam                            ' for wparam, lparam handlers
'stacks label,while,for...................................................................
int labelStack[1024] , labelCounter=0 : string labelName[1024] : int gotoID[1024] 
int whileStack[1024] , whileCounter=0 , whileID[1024]
int fnStack[1024] , fnCounter=0, endFnCounter=0 ,wMsgCounter=0,endWMsgCounter=0
'images id
int imgID[1024], imgHDC[64]
' win messge token positions.............................................................
int pos_wmMouseMove , pos_wmKeyDown , pos_wmLeftBDown, pos_wmTimer

' Open Window with message loop ======================================================
win = SetWindow("micro(A):", x , y , w , h , 0 , wstyle)
InitDraw(win) :  'hdcImg = CreateCompatibleDC(0)
WindowFont( 16, 8, 0, "Consolas")
Randomize()                        
'exe name

 string fname = GetCommandLine ()
   'fName = chr(34) + fname + chr(34)
   'MsgBox fname , "CommandLine:"
IF fname<>""
'LoadFromFile
	STRING args,src,tmp
	INT qPos,qPos2,dot
'tmp = Trim(fname)
dot = instr(1,fname,".")
'print "DOT:" + str(dot) '64 .exe"

' remove the executable information
tmp = mid(fname,dot+5, 254)
'print "TEMP:" + tmp
' get quote position
   qPos = instr(2,tmp, chr(34))
'print "DQ1:" + str(qPos)
   qPos2 = instr(qPos+1,tmp, chr(34))
'print "DQ2:"  + str(qPos2)
'print str(qpos)
   args = Mid(tmp,qPos+1,qPos2-3)
   src = Trim(args) 
 'print "SRC:" + src

    If len(src) < 1 
       args="No Source"
      'info=args : IF LEN(info)=0 then info = "No Source"
    End if
'print args...if is empty then compiler trow F ???
'SendMessage edit1,WM_SETTEXT,0,strptr args

code = GetFile src
END IF


codeLen=len(code)
tn = run_tokenizer(code) 
'MsgBox  str(tn) ,"Tokenizer Out"                     ' 1 means OK!
'---------------------------------------------------------------
' prescan for variables,commands....
'---------------------------------------------------------------
'if tokenization error=0 then OK!..preScan()/PASS2
int pscan=0
If tokerr = 0 and tn = 1
   pscan = preScan()   
Else
   MsgBox "END" ,"Program Exit!"
   ExitProcess 0
End if

'if ps = 1 then OK...........................
if pscan = 1 
   'MsgBox "PreScan:OK!" ,"Continue..."  
   tokInterpreter()                  ' run token-interpreter
Else
   MsgBox "END" ,"Program Exit!"  
End if

ExitProgram:

'================================================================
Wait()  '/// message loop ///
'================================================================
Function WndProc (sys hwnd,wmsg,wparam,lparam) as sys callback
SELECT hwnd
CASE win
Select wmsg

     CASE WM_PAINT 
          'paintstruct ps
          BeginPaint win,ps
          BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
          'InvalidateRect(win, 0, 0) 
         EndPaint win,ps

    'CASE WM_ERASEBKGND
     ' return 1
'processing windows messages by Interpreter..................................................
	CASE WM_MOUSEMOVE
		hMouseX = LoWord(lParam)
		hMouseY = HiWord(lParam)
         'call block winMsg
         if pos_wmMouseMove > 0
            tc = pos_wmMouseMove : tokInterpreter()          
        end if
'keybord event...............................................................................
	CASE WM_KEYDOWN
         hWParam = wParam
         'call block winMsg
         if pos_wmKeyDown > 0
            tc = pos_wmKeyDown : tokInterpreter()
            tc=0
         end if
'............................................................................................
	CASE WM_TIMER
         'call block winMsg
         if pos_wmTimer > 0
            tc = pos_wmTimer : tokInterpreter()
            tc=0
         end if
'............................................................................................

	CASE WM_CLOSE
	CloseWindow(win)
    msgQuit=1
	EndProgram()

End Select
END SELECT
RETURN Default
END FUNCTION


'===========================================================================================

Sub preScan() as int
'MsgBox "OK..." ," PASS 2"
int i,f, numOfTokens = nTokens ,lineNum=1 ,varID=0, vID, n ,vTyp ,fID   ' numofTokens as local/reset global nTokens
string vName : int match_name, wm_Name : string gotoName : string funName, msgName
whileCounter=0 :wendCounter=0: fnCounter=0 :endFnCounter=0: fnID =0 : ifCounter=0 : endifCounter=0 

'record keywords from token list ...........................................
For i = 1 to numOfTokens
          If ucase(tokList[i]) = kwList[4]  : typList[i] = tkIF : ifCounter++  : End If        
          If ucase(tokList[i]) = kwList[5]  : typList[i] = tkELSE  : End If    
          If ucase(tokList[i]) = kwList[6]  : typList[i] = tkENDIF : endifCounter++ : End If  
          If ucase(tokList[i]) = kwList[7]  : typList[i] = tkWHILE : whileCounter++ : End If                   
          If ucase(tokList[i]) = kwList[8]  : typList[i] = tkWEND  : wendCounter++  : End If                   
          If ucase(tokList[i]) = kwList[9]  : typList[i] = tkFOR   : forCounter++   : End If     
          If ucase(tokList[i]) = kwList[10] : typList[i] = tkTO    : End If                     
          If ucase(tokList[i]) = kwList[11] : typList[i] = tkSTEP  : End If                    
          If ucase(tokList[i]) = kwList[12] : typList[i] = tkNEXT  : nextCounter++ : End If    
          If ucase(tokList[i]) = kwList[13] : typList[i] = tkPRINT : End If 
          If ucase(tokList[i]) = kwList[14] : typList[i] = tkSTRS  : End If 
          If ucase(tokList[i]) = kwList[15] : typList[i] = tkVAL   : End If 
                  
          If ucase(tokList[i]) = kwList[16] : typList[i] = tkLABEL : End If                   
          If ucase(tokList[i]) = kwList[17] : typList[i] = tkGOTO : End If                   
          If ucase(tokList[i]) = kwList[18] : typList[i] = tkWCOLOR : End If                  
          If ucase(tokList[i]) = kwList[19] : typList[i] = tkFCOLOR : End If                 
          If ucase(tokList[i]) = kwList[20] : typList[i] = tkBCOLOR : End If                  
          If ucase(tokList[i]) = kwList[21] : typList[i] = tkPSET : End If 
          If ucase(tokList[i]) = kwList[22] : typList[i] = tkCIRCLE : End If 
          If ucase(tokList[i]) = kwList[23] : typList[i] = tkRECT : End If
          If ucase(tokList[i]) = kwList[24] : typList[i] = tkLINE : End If
          If ucase(tokList[i]) = kwList[25] : typList[i] = tkRND : End If
          If ucase(tokList[i]) = kwList[26] : typList[i] = tkSIN : End If
          If ucase(tokList[i]) = kwList[27] : typList[i] = tkCOS : End If
          If ucase(tokList[i]) = kwList[28] : typList[i] = tkTAN : End If
          If ucase(tokList[i]) = kwList[29] : typList[i] = tkSWAP : End If
		 If ucase(tokList[i]) = kwList[30] : typList[i] = tkRAND : End If
		 If ucase(tokList[i]) = kwList[31] : typList[i] = tkABS : End If
		 If ucase(tokList[i]) = kwList[32] : typList[i] = tkATAN : End If
		 If ucase(tokList[i]) = kwList[33] : typList[i] = tkSQR : End If
		 If ucase(tokList[i]) = kwList[34] : typList[i] = tkLOG : End If
		 If ucase(tokList[i]) = kwList[35] : typList[i] = tkROUND : End If
		 If ucase(tokList[i]) = kwList[36] : typList[i] = tkINT : End If
		 If ucase(tokList[i]) = kwList[37] : typList[i] = tkFUNC : fnCounter++        : End If
          If ucase(tokList[i]) = kwList[38] : typList[i] = tkENDFN : endFnCounter++    : End If
          If ucase(tokList[i]) = kwList[39] : typList[i] = tkFRAC : End If
		 If ucase(tokList[i]) = kwList[40] : typList[i] = tkWINMSG : wMsgCounter++    : End If
          If ucase(tokList[i]) = kwList[41] : typList[i] = tkENDWM : endWMsgCounter++  : End If
          If ucase(tokList[i]) = kwList[42] : typList[i] = tkMOUSEX : End If
          If ucase(tokList[i]) = kwList[43] : typList[i] = tkMOUSEY : End If 
		 If ucase(tokList[i]) = kwList[44] : typList[i] = tkHWPARAM : End If
		 If ucase(tokList[i]) = kwList[45] : typList[i] = tkHLPARAM : End If
         
          If ucase(tokList[i]) = kwList[51] : typList[i] = tkLOADIMG : End If
		 If ucase(tokList[i]) = kwList[52] : typList[i] = tkSHOWIMG : End If
          If ucase(tokList[i]) = kwList[53] : typList[i] = tkSHOWIMGT : End If

          If ucase(tokList[i]) = kwList[60] : typList[i] = tkMIDSTR   : End If
          If ucase(tokList[i]) = kwList[61] : typList[i] = tkLEFTSTR  : End If
          If ucase(tokList[i]) = kwList[62] : typList[i] = tkRIGHTSTR : End If


Next i
i=0
'search for labels in code and if exist then record them.....................
For n = 1 to numOfTokens
	IF typList[n] = tkLABEL
          If typList[n+1] <> tkIDENT
             MsgBox "Label witout name! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~LABEL": return 0
          End if
          If typList[n+1] = tkIDENT
             labelCounter++  ': print "Label_Count:"  +  str(labelCounter)       'label counter = tok pos
             labelName[n+1] = tokList[n+1] 'set labelName [index] as token pos with  label name
             'print "TOKEN NAME:" + tokList[n+1]
          End if
     END IF
Next n
n=0
'
'search for function in code and if exist  then record them.....................
'example func myFunc ( ) 
For n = 1 to numOfTokens
	IF typList[n] = tkFUNC
          If typList[n+1] <> tkIDENT
             MsgBox "Function witout name! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~FUNC": return 0
          End if
          ' null func -> subroutine as -> FUNC myFunc<-1 (<-2 )<-3 
          If typList[n+1] = tkIDENT and typList[n+2] = tkLPAREN and typList[n+3] = tkRPAREN
             'fnCounter++  ': print "Function_Count:"  +  str(fnCounter)       'func counter = tok pos
             fnName[n+1] = lcase(tokList[n+1]) 'set (LCASE)funcName [index] as token pos with function name
             fnID = n+1 : fnList[n+1] = fnID : ' fnlist[index] hold function token position 
             'print "PASS2:FUNC ID:" + str( fnList[fnID] ) ' show fnID value -> func pos
          End if

     END IF
Next n
n=0
'----------------------------------------------------------------------------

	For i = 1 to numOfTokens

		IF typList[i]=tkEOL: tokList[i]="EOL": lineNum++ : END IF  'check EndOfLine

		IF typList[i] = tkIDENT
           If ucase(tokList[i]) = kwList[1]: typList[i] = tkFLOAT  'if varNUM ...........................
              if typList[i+1] <> tkIDENT 'check err
                 MsgBox "Missing variable after VAR! line: " + str(lineNum),"ERROR": return 0
			else
              i=i+1 ' next token
               While typList[i] <> tkCOLON And typList[i] <> tkEOL  'store num variable              -low case var name-
                  If typList[i] = tkIDENT : varID = varID + 1 : varList[i] = varID : varName[varID] = lcase(tokList[i]) : varType[varID] = tkFLOAT :varNum[varID] = 0 
                    ' MsgBox "Variable name: " + tokList[i] + " VAR.TYPE: " + str(varType[varID]) , "TYPE"
                  End if
                i++
               Wend 
		     end if

          End if  ' endOf varNUM..........................................................................
          If ucase(tokList[i]) = kwList[2]: typList[i] = tkSTRING  'if varSTR ...........................
              if typList[i+1] <> tkIDENT 'check err
                 MsgBox "Missing variable after STR! line: " + str(lineNum),"ERROR": return 0
			else
              i=i+1 ' next token
               While typList[i] <> tkCOLON And typList[i] <> tkEOL  'store str variable
                  If typList[i] = tkIDENT : varID = varID + 1 : varList[i] = varID : varName[varID] = lcase(tokList[i]): varType[varID] = tkSTRING: varStr[varID] = "" 
                     'MsgBox "Variable name: " + tokList[i] ,"variable->STR"
                  End if
                i++
               Wend 
		     end if
              End if  ' endOf varSTR.......................................
            If ucase(tokList[i]) = kwList[3]: typList[i] = tkPOINTER  'if varPTR ...........................
              if typList[i+1] <> tkIDENT 'check err
                 MsgBox "Missing variable after PTR! line: " + str(lineNum),"ERROR": return 0
			else
              i=i+1 ' next token
               While typList[i] <> tkCOLON And typList[i] <> tkEOL  'store ptr variable
                  If typList[i] = tkIDENT : varID = varID + 1 : varList[i] = varID :: varName[varID] = lcase(tokList[i]): varType[varID] = tkPOINTER: varPtr[varID] = 0 
                     'MsgBox "Variable name: " + tokList[i] ,"variable->PTR"
                  End if
                i++
               Wend 
		     end if
          End if  ' endOf varPTR.......................................
 
          ELSE 
          'error
	   END IF
        ' if variable is outside of declaration varNUM,varSTR,varPTR...
        ' search for varible name and return variable ID
	   IF typList[i] = tkIDENT and typList[i-1] <> tkLABEL and typList[i-1] <> tkGOTO  and typList[i-1] <> tkFUNC 
             if typList[i+1] <> tkLPAREN   
                 vName = tokList[i] : match_name=0
                 'loop to find var name,id,typ
                 For n = 1 to 1024
                    vID = varList[n]  : vTyp = varType[vID]  ' check ID and Type                  				
                    if lcase(vName) =  varName[n]            ' if var is in list
                       vID = n                               ' id is n
                       vTyp = varType[vID]                   ' check type
                       varList[i] = vID         ' set var list with ID from varName array-> tokList[i],typList[i],varList[i]=id
                       exit for       
                    end if                     
                 Next n
              
               ' if var type is 0 then error
               if vTyp=0 : MsgBox "Variable ID not found! -{ " + vName +" }-Line: " + str(lineNum),"ERROR": return 0: end if
              end if        
       END IF
       ' if variable is outside of declaration and continue with LParen & RParen like myVar() then is FUNCTION call
        ' search for function name and return function ID     
       IF typList[i] = tkIDENT and typList[i-1] <> tkLABEL and typList[i-1] <> tkGOTO  and typList[i-1] <> tkFUNC ' myfn , ( , )
          match_name = 1
          if typList[i+1] = tkLPAREN and typList[i+2] <> tkIDENT
              funName = tokList[i] : match_name=0
              'loop to find func name,id,typ
               For n = 1 to 1024
                    fID = fnList[n]  ': vTyp = varType[vID]  ' check ID and Type                  				
                    if lcase(funName) =  fnName[n]            ' if func is in list
                       fID = n                                ' id is n
                       'vTyp = varType[vID]                   ' check type
                       fnList[i] = fID         ' set var list with ID from fnName 
                       match_name=1 :' print "Function name found: " + funName + " fnID/pos-> " + str(fID)
                       exit for       
                    end if                     
               Next n 
           
             ' if func name not found then error  
            if  match_name <> 1 :  MsgBox "Function not found! -{ " + funName +" }-Line: " + str(lineNum),"FN_ERROR": return 0: end if 
            end if
      END IF
      
       'check WINMSG -> winMsg msgName -> winMSG ptr<INT>(wmMouseMove).......................................................
       IF typList[i] = tkWINMSG
		 'check next token as ptr/num(arg1)
          If typList[i+1] <> tkIDENT 
			MsgBox "Invalid Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~WIN_MSG": return 0
          End if

          If ucase(tokList[i+1]) = "WMMOUSEMOVE" :wm_Name=1 : pos_wmMouseMove = i+1 : End If  'set msg position
		 If ucase(tokList[i+1]) = "WMKEYDOWN"   :wm_Name=1 : pos_wmKeyDown   = i+1 : End If 
		 If ucase(tokList[i+1]) = "WMTIMER"     :wm_Name=1 : pos_wmTimer     = i+1 : End If  
          
		 ' if msg name not found then error
          msgName = tokList[i+1]  
          if  wm_name <> 1 :  MsgBox "Message not valid! -{ " + msgName +" }-Line: " + str(lineNum),"ERROR": return 0: end if
       END IF
       
       'check MOUSEX var, MOUSEY var-----------------------------------------------------------------------------------------
       IF  typList[i] = tkMOUSEX
           If typList[i+1] <> tkIDENT 
			MsgBox "Invalid Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~MOUSEX": return 0
          End if
       END IF
       IF  typList[i] = tkMOUSEY
           If typList[i+1] <> tkIDENT 
			MsgBox "Invalid Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~MOUSEY": return 0
          End if
       END IF

	  'check WPARAM var, LPARAM var-----------------------------------------------------------------------------------------
       IF  typList[i] = tkHWPARAM
           If typList[i+1] <> tkIDENT 
			MsgBox "Invalid Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~HWPARAM": return 0
          End if
       END IF
       IF  typList[i] = tkHLPARAM
           If typList[i+1] <> tkIDENT 
			MsgBox "Invalid Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~HLPARAM": return 0
          End if
       END IF


       'check PRINT x(+1),(+2)y(+3),(+4)var(+5) ..var= varName|number|quoted string ----------------------------------------------
       IF typList[i] = tkPRINT
             'check next token as var/num(arg1)
          If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~print": return 0
          End if
          If typList[i+2] <> tkCOMMA   '2 comma
			MsgBox "Comma Separator(2) -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~print": return 0
          End if
           If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument()2! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERROR~print": return 0
          End if
		 If typList[i+4] <> tkCOMMA '4 comma
			MsgBox "Comma Separator (4) -{ " + tokList[i+4] +" }-Line: " + str(lineNum+1),"ERROR~print": return 0
          End if
          If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER and typList[i+5] <> tkQSTRING   '5
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERROR~print": return 0
          End if
       END IF

       IF typList[i] = tkPSET
              'check next token as var/num(arg1)
          If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if
          If typList[i+2] <> tkCOMMA  '2 
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if
           If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument()2! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if 
      END IF

      IF typList[i] = tkLINE
              'check line 1,2,3,4
          If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if
          If typList[i+2] <> tkCOMMA  '2 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if
           If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument()2! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if 
          If typList[i+4] <> tkCOMMA  '4 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+4] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if
           If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER '5
			MsgBox "Wrong Argument()2! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if
          If typList[i+2] <> tkCOMMA  '6 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+6] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if 
          If typList[i+7] <> tkIDENT and typList[i+7] <> tkNUMBER '7
			MsgBox "Wrong Argument()2! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERROR~PSET": return 0
          End if 
      END IF

	 IF typList[i] = tkRECT
              'check rect 1,2,3,4
          If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if
          If typList[i+2] <> tkCOMMA  '2 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if
           If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument()2! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if 
          If typList[i+4] <> tkCOMMA  '4 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+4] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if
           If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER '5
			MsgBox "Wrong Argument()2! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if
          If typList[i+2] <> tkCOMMA  '6 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+6] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if 
          If typList[i+7] <> tkIDENT and typList[i+7] <> tkNUMBER '7
			MsgBox "Wrong Argument()2! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERROR~RECT": return 0
          End if 
      END IF


       'check IF x(1) <(2) y(3) &(4) a=v | c="X"   if var = varName|number|quoted string cop(<,>,=,!) LESS,GREAT,EQUAL,NOT------
       IF typList[i] = tkIF
              'check next token as var(arg1)
          If typList[i+1] <> tkIDENT 
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~IF": return 0
          End if
              'check operator <,>,=,!
          If instr("<>=!",tokList[i+2]) = 0
             MsgBox "Wrong operator(2)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~IF": return 0
          End if
              'check next arg(3) 
          If typList[i+3] <> tkIDENT and  typList[i+3] <> tkNUMBER and  typList[i+3] <> tkQSTRING
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERROR~IF": return 0
          End if
              'check logic operator AND or OR -> & or | (used in micro(A)) ..........................................
          IF typList[i+4] = tkAND OR typList[i+4] = tkOR
              'MsgBox "token AND or OR","AND~OR"-> if a>b & c=d
               If typList[i+5] <> tkIDENT 
			    MsgBox "Wrong Argument(5)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERROR~IF": return 0
               End if
			     'check operator <,>,=,!
               If instr("<>=!",tokList[i+6]) = 0
                  MsgBox "Wrong operator(2)! -{ " + tokList[i+6] +" }-Line: " + str(lineNum+1),"ERROR~IF": return 0
               End if
                   'check next arg(7) 
               If typList[i+7] <> tkIDENT and  typList[i+7] <> tkNUMBER and  typList[i+7] <> tkQSTRING
			    MsgBox "Wrong Argument(7)! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERROR~IF": return 0
               End if
          END IF
 
       END IF
       'check WHILE x(1) <(2) y(3)... WHILE var = varName|number|quoted string cop(<,>,=,!) LESS,GREAT,EQUAL,NOT------
       IF typList[i] = tkWHILE
              'check next token as var(arg1)
          If typList[i+1] <> tkIDENT 
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~WHILE": return 0
          End if
              'check operator <,>,=,!
          If instr("<>=!",tokList[i+2]) = 0
             MsgBox "Wrong operator(2)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~WHILE": return 0
          End if
              'check next arg(3) 
          If typList[i+3] <> tkIDENT and  typList[i+3] <> tkNUMBER and  typList[i+3] <> tkQSTRING
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERROR~WHILE": return 0
          End if 
          'whileCounter++                    ' incr wc+1
          whileID[i] =  i       ' save whileID as token position
         ' whileStack[whileCounter] =  whileID[i]   ' save while pos in stack 
       END IF 
       'check wend..................................................
       IF typList[i] = tkWEND
          ' whileID[i] =  i 

       END IF
      
       'check goto ------ goto $name................................
       IF typList[i] = tkGOTO
          If typList[i+1] <> tkIDENT
             MsgBox "Goto witout name! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERROR~GOTO": return 0
          End if
            If typList[i+1] = tkIDENT  'goto name
               gotoName = lcase(tokList[i+1]) : match_name=0 :'print "gtName:"+ gotoN
               ' search for label name...
               for n = 1 to 1024 
                   if gotoName = lcase(labelName[n])  'lcase->gotoname = lcase->labelname
                       'print "GOTO-NAME:" + gotoName 
                        match_name=1
                        'store label pos into gotoID array
                         gotoID[i+1] = n ': print "gotoID: "+ str(gotoID[n]) + " LabelStack;" + str(labelStack[n]) ' 45
                       exit for
                   end if 
               next n
              If match_name=0 
                MsgBox "Cannot found label :" + tokList[i+1] + " -Line: " + str(lineNum+1),"ERROR~GOTO" :  return 0 
              End If
            End if 
       END IF

       'check RND,SIN,COS,TAN....................................................................................
       IF typList[i] = tkRND
              'check next token as var/num(arg1)
          If typList[i+2] <> tkIDENT and typList[i+2] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~RND": return 0
          End if
      END IF
      IF typList[i] = tkSIN
          If typList[i+2] <> tkIDENT and typList[i+2] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~SIN": return 0
          End if
      END IF
      IF typList[i] = tkCOS
          If typList[i+2] <> tkIDENT and typList[i+2] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~COS": return 0
          End if
      END IF
      IF typList[i] = tkTAN
          If typList[i+2] <> tkIDENT and typList[i+2] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~TAN": return 0
          End if
      END IF
      IF typList[i] = tkRAND
          If typList[i+2] <> tkIDENT and typList[i+2] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~RAND": return 0
          End if
      END IF

        'check STRS()..VAL()..................................................................................
       IF typList[i] = tkSTRS
         'print "STRS().found!"
          If typList[i+2] <> tkIDENT and typList[i+2] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERROR~STRS": return 0
          End if
       END IF

      'check WCOLOR --------------------------------------------------------------------------------------------
      IF typList[i] = tkWCOLOR
         If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERR~WCOLOR": return 0
         End if
         If typList[i+2] <> tkCOMMA or typList[i+4] <> tkCOMMA '2 & 4
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERR~WCOLOR": return 0
         End if
         If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument(2)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERR~WCOLOR": return 0
         End if 
         If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERR~WCOLOR": return 0
         End if       
      END IF
      'check FCOLOR ---------------------------------------------------------------------------------------------
      IF typList[i] = tkFCOLOR
         If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERR~FCOLOR": return 0
         End if
         If typList[i+2] <> tkCOMMA or typList[i+4] <> tkCOMMA '2 & 4
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERR~FCOLOR": return 0
         End if
         If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument(2)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERR~FCOLOR": return 0
         End if 
         If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERR~FCOLOR": return 0
         End if       
      END IF
     'check BCOLOR ---------------------------------------------------------------------------------------------
      IF typList[i] = tkBCOLOR
         If typList[i+1] <> tkIDENT and typList[i+1] <> tkNUMBER
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERR~BCOLOR": return 0
         End if
         If typList[i+2] <> tkCOMMA or typList[i+4] <> tkCOMMA '2 & 4
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERR~BCOLOR": return 0
         End if
         If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument(2)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERR~BCOLOR": return 0
         End if 
         If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERR~BCOLOR": return 0
         End if       
      END IF

      'check LoadImage LoadImage (INT hInst,STR lpsz, INT dwType,INT Width,INT Height, INT Flags )
      'himg  = LoadImage(0, "micData\mImg1.bmp", 0, 16, 16, 24)    ...load bitmap
      ' icon = LoadImage(0, "micData\icOpen.ico", 1, 32, 32, 24)  ...load icon
      'syntax-> LoadImg (1)hImg , (3)str "img.bmp" ,(5)imgType , (7)w , (9)h, (11)colorFlags
      IF typList[i] = tkLOADIMG
              'check LoadImg 1,2,3,4
          If typList[i+1] <> tkIDENT  'hImg image handler ,must be variable!
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if
          If typList[i+2] <> tkCOMMA  '2 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if
           If typList[i+3] <> tkIDENT and typList[i+3] <> tkQSTRING '3
			MsgBox "Wrong Argument(2)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
          If typList[i+4] <> tkCOMMA  '4 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+4] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if
           If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER '5
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if
          If typList[i+6] <> tkCOMMA  '6 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+6] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
          If typList[i+7] <> tkIDENT and typList[i+7] <> tkNUMBER '7
			MsgBox "Wrong Argument(4)! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
          If typList[i+8] <> tkCOMMA '8 comma
			MsgBox "Comma Separator ?  -{ " + tokList[i+8] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
          If typList[i+9] <> tkIDENT and typList[i+9] <> tkNUMBER '9
			MsgBox "Wrong Argument(5)! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
          If typList[i+10] <> tkCOMMA '10 comma
			MsgBox "Comma Separator ?  -{ " + tokList[i+10] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
          If typList[i+11] <> tkIDENT and typList[i+11] <> tkNUMBER '11
			MsgBox "Wrong Argument(6)! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERR-LoadImg": return 0
          End if 
      END IF

      'check ShowImage hImg, x,y,w,h -> syntax ShowImg himg, ix,iy,iw,ih
       IF typList[i] = tkSHOWIMG
              'check LoadImg 1,2,3,4
          If typList[i+1] <> tkIDENT  'hImg image handler ,must be variable!
			MsgBox "Wrong Argument(1)! -{ " + tokList[i+1] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if
		 If typList[i+2] <> tkCOMMA  '2 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+2] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if
		 If typList[i+3] <> tkIDENT and typList[i+3] <> tkNUMBER '3
			MsgBox "Wrong Argument(2)! -{ " + tokList[i+3] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if
          If typList[i+4] <> tkCOMMA  '4 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+4] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if
		 If typList[i+5] <> tkIDENT and typList[i+5] <> tkNUMBER '5
			MsgBox "Wrong Argument(3)! -{ " + tokList[i+5] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if
		 If typList[i+6] <> tkCOMMA  '6 comma
			MsgBox "Comma Separator ? -{ " + tokList[i+6] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if
		 If typList[i+7] <> tkIDENT and typList[i+7] <> tkNUMBER '7
			MsgBox "Wrong Argument(4)! -{ " + tokList[i+7] +" }-Line: " + str(lineNum+1),"ERR-ShowImg": return 0
          End if

       END IF



	Next i


    'check counters
	If whileCounter > wendCounter
       MsgBox "WHILE without WEND , check code!","LOOP ERROR"  : return 0
	End If 
	If wendCounter > whileCounter
       MsgBox "WEND without WHILE , check code!","LOOP ERROR"  : return 0
	End If 
    If ifCounter > endifCounter
       MsgBox "IF without ENDIF , check code!","IF/ENDIF ERROR": return 0
	End If 
	If endIfCounter > ifCounter
       MsgBox "ENDIF without IF , check code!","IF/ENDIF ERROR": return 0
	End If
	If fnCounter > endFnCounter
       MsgBox "FUNC without ENDFN , check code!","FUNC ERROR"  : return 0
	End If 
	If endFnCounter > fnCounter
       MsgBox "ENDFN without FUNC , check code!","FUNC ERROR"  : return 0
	End If 
	If wMsgCounter > endWMsgCounter
       MsgBox "WINMSG without ENDWM , check code!","WMSG ERROR"  : return 0
	End If 
	If endWMsgCounter > wMsgCounter
       MsgBox "ENDWM without WINMSG, check code!","WMSG ERROR"  : return 0
	End If 

return 1

End sub
'=================================================================================================================
Sub tokInterpreter()
    int tok=0,ntok=0,vID=0 ,vTyp=0, funcCall=0, funcID=0: float frnd : INT whileTOS=0 , wcount,cond1,cond2 = -1, logOP
    float numRes=0 : string strRes ,funcName : int ptrRes : int resIF , resWhile, labelPos, whilePos,wendPos,funcPos,callPos
    float fop1,fop2,fop3,fop4 : int iop1,iop2,iop3,iop4 : string sop1,sop2,sop3,sop4
    int imgType,imgX,imgY,imgW,imgH,cFlag,htc
    int intImg ,imageID,iID
    msgQuit=0 

	While tc < nTokens
         start:
		gettok() :' print "TOKEN:" + tokList[tc]
         tok = tkTyp : ntok = typList[tc+1]

         Select tok
         
		case tkFLOAT
         'IF tok = tkFLOAT ' token is def varNUM...'skip tokens to colon/eol
            tc++ : While typList[tc] <> tkCOLON And typList[tc] <> tkEOL : tc++ : Wend
         'END IF
         case tkSTRING
		'IF tok = tkSTRING ' token is def varSTR...'skip tokens to colon/eol
            tc++ : While typList[tc] <> tkCOLON And typList[tc] <> tkEOL : tc++ : Wend
         'END IF

      case tkIDENT
		IF ntok <> tkLPAREN
           vID = varList[tc]  'get ID
           vTyp = varType[vID]
           ' vID = varList[tc] : vTyp = varType[vID] : print "varID: " + str(vID) + ":VarType:: " + str(vTyp) 
			 If vTyp = tkFLOAT    ' numeric var
                 if ntok = tkEQUAL 
                    tc++            ' skip "=" is assign
                    numRes = exec_expr() : varNum[vID] = numRes ' store result in varNum[] list
                  end if 
              End if
		     If vTyp = tkSTRING    ' string var
                 if ntok = tkEQUAL 
                    tc++            ' skip "=" is assign
                    strRes = exec_strExpr() : varStr[vID] = strRes ' store result in varStr[] list
                  end if 
              End if
			If vTyp = tkPOINTER    ' pointer/int var
                 if ntok = tkEQUAL 
                    tc++            ' skip "=" is assign
                    ptrRes = exec_expr() : varPtr[vID] = INT(ptrRes) ' store result in varPtr[] list
                  end if 
              End if
           END IF
         'if ident is function call...ident()
         if ntok = tkLPAREN 
            funcName = tokList[tc] :' print "I->Function name:" + funcName
            callPos = tc
            funcID   = fnList[tc]  :' print "I->Func ID:" + str(funcID)   ' get funcID-> call pos  
            'print "I-> func_token: " + tokList[funcID-1]   " -->name on pos: " + tokList[funcID] 
               tc = funcID + 2  ' jump to func pos ,skip 2 tokens ( )...
               goto start
        end if  

	case tkFUNC
       'if func call = 0 then skip code to end of function
        if funcCall = 0   ' function is not called 
             do           ' loop to ENDFN
               tc++                  
			   if typList[tc] = tkENDFN                              ' found a endFN statement
                    exit do                   
                 end if                
            end do
                tc++   ' skip endFN and get EOL -> continue                           
         end if

	case tkENDFN 
         tc = callPos
         goto start

    case tkENDWM   'end win msg -> return
         Return 
        ' EXIT SUB
        
    case tkMOUSEX
		 gettok() : tok = tkTyp 
           If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : varNum[vID] = hMouseX : end if  'push value of MouseX into var
           End if 
                         
	case tkMOUSEY
		 gettok() : tok = tkTyp 
           If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : varNum[vID] = hMouseY : end if  'push value of MouseY into var
           End if 
	
	case tkHWPARAM
		 gettok() : tok = tkTyp 
           If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : varNum[vID] = hWParam : end if  'push value of WParam into var
           End if                          

	case tkPRINT
		'IF tok = tkPRINT
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : prX = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : prX = varNum[vID] : end if 
            End if                          
            'strRes=""                                                                                  'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : prY = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : prY = varNum[vID] : end if
            End if  
           ' tc++                                                                'skip comma
            tc++ : gettok() : tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]
            If tok = tkNUMBER : numRes = val(tokList[tc]) : strRes = str(numRes) : End if               'if is number
            If vTyp = tkFLOAT   : numRes = varNum[vID] : strRes = str(numRes): End if                    'if is numVar
            If vTyp = tkPOINTER : numRes = varPtr[vID] : strRes = str(numRes): End if
            If vTyp = tkSTRING  : vID = varList[tc] : strRes = varStr[vID] : End if                       'if is strVar
            if tok = tkQSTRING  : strRes = tokList[tc] : End if                                          'if is quoted
		   'print on window
              'SetBkColor( hDCMem, bColor)
              'SetTextColor( hDCMem, fColor) 
            TextOut hdcMem,prX,prY,strRes,Len(strRes)
            ReleaseDC( win, hdcMem)
         'END IF

	case tkPSET
         'IF tok = tkPSET
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : piX = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : piX = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : piY = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : piY = varNum[vID] : end if
            End if  
            'pixel on window is faster than 
              'PixelOn (win, piX, piY)
			'fColor = rgb(0,0,0)
			SetPixel ( hdcMem, piX, piY, fColor)
              'SetPixel( hdc, piX, piY, fColor)
             'BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
             'ReleaseDC( win, hdc)
         'END IF
	case tkSWAP
         'IF tok = tkSWAP
            'flip DC buffer
            if msgQuit=0
            BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
            end if
             'GetClientRect win, rc
             'SetStretchBltMode hdc,sys_mode  
             'StretchBlt hdc,0,0,rc.right,rc.bottom,hdcMem,0,0,ww,wh,0xCC0020
        ' END IF
	case tkIF
         'IF tok = tkIF.................................................................
            gettok(): tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                                'get (1)
		   IF vTyp = tkFLOAT  
                '                                                                                                          'if numeric var
                vID = varList[tc] : fop1 = varNum[vID]                                                                     'op1
                tc++ : gettok() : tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                     'skip cond1      
                If vTyp = tkFLOAT :  vID = varList[tc] : fop2 = varNum[vID] :End if                                        'get (2) 
                If tok = tkNUMBER : fop2 = val(tokList[tc]) : end if                                                       'get (2)
                if vTyp <> tkFLOAT and tok <> tkNUMBER: MsgBox "Wrong Type! " + token ,"ERROR~If":goto ExitProgram :end if   'wrong type
                tc=tc-2 : gettok() : tok = tkTyp                                                                           'get cond1 back(-2),gt(+1)
                   ' If ntok <> tkAND or ntok <> tkOR
                      resIf = vNO 
                       Select tok
                          Case tkLESS
                             if fop1 < fop2  : resIf = vYES : end if              
                          Case tkMORE
                             if fop1 > fop2  : resIf = vYES : end if 
                          Case tkEQUAL
                             if fop1 = fop2  : resIf = vYES : end if
                          Case tkNOT
                             if fop1 <> fop2 : resIf = vYES : end if
                       End select
                     cond1 = resIf
              END IF 
               ' print ">>TOKEN:" + tokList[tc] + " >TC: "   'check AND or OR
               ' shift tc>> = skip var after operator [op] [var] >> 
               tc=tc+2 : logOP = 0 
		 IF (typList[tc] <> tkAND) AND (typList[tc] <> tkOR): tc=tc-1: goto updateIF: End if
                                 'if there is no AND or OR then jump to start   
		    if typList[tc] = tkAND : logOP = tkAND :  end if                             'if logical operator is AND / &
             IF typList[tc] = tkOR  : logOP = tkOR  : END IF                              'if logical operator is OR  / |
               gettok(): tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]           'get ar(3)
               IF vTyp = tkFLOAT  
                vID = varList[tc] : fop3 = varNum[vID]                                                                     'op2
                tc++ : gettok() : tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                     'skip cond2      
                If vTyp = tkFLOAT :  vID = varList[tc] : fop4 = varNum[vID] :End if                                        'get (3) 
                If tok = tkNUMBER : fop4 = val(tokList[tc]) : end if                   
                if vTyp <> tkFLOAT AND tok <> tkNUMBER: MsgBox "Wrong Type! " + token ," ERROR":goto ExitProgram : end if   'wrong type
                tc=tc-2 : gettok() : tok = tkTyp                                                                          'get cond2 back(-2),gt(+1)
                'If ntok <> tkAND or ntok <> tkOR
                       resIf = vNO 
                       Select tok
                          Case tkLESS
                             if fop3 < fop4 : resIf = vYES : end if              
                          Case tkMORE
                             if fop3 > fop4 : resIf = vYES : end if 
                           Case tkEQUAL
                             if fop3 = fop4 : resIf = vYES : end if
                          Case tkNOT
                            if fop3 <> fop4 : resIf = vYES : end if
                        End select
                    cond2 = resIf
               END IF
              tc=tc+2 'skip var after operator [op] [var] >> 
             'updateIF:   '<- label update IF
			   '-----------------------------------------------------------------------------
            IF logOP = tkAND                         
              IF cond1 = vYES AND cond2 = vYES : resIf = vYES : end if ' check cond
              IF cond1 = vNO  AND cond2 = vNO  : resIf = vYES : end if
              IF cond1 = vYES AND cond2 = vNO  : resIf = vNO  : end if
              IF cond1 = vNO  AND cond2 = vYES : resIf = vNO  : end if
              'print "RES-IF:" + str(resIf)
            END IF
            '-----------------------------------------------------------------------------
            IF logOP = tkOR
              IF cond1 = vYES AND cond2 = vYES : resIf = vYES : end if 
              IF cond1 = vYES AND cond2 = vNO  : resIf = vYES : end if 
              IF cond1 = vNO  AND cond2 = vYES : resIf = vYES : end if 
              IF cond1 = vNO  AND cond2 = vNO  : resIf = vNO  : end if
            END IF
		
          updateIF:   '<- label update IF
         'exec_IF----------------------------
             'if resIF = vYES :goto continueIF :end if
            ' continueIF:
             'continue until tkELSE 
             if resIF = vNO 
                 do
                 tc++ 
                 if typList[tc] = tkELSE : goto start : end if
                 if typList[tc] = tkENDIF : exit do : end if
                 end do
             'end if
             'else
               ' goto start
             endif
         
	case tkELSE
         'exec_ELSE.........................................
         'IF tok = tkELSE
            if resIF = vYES
               do
                 tc++ 
                 'if typList[tc] = tkELSE : goto start : end if
                 if typList[tc] = tkENDIF : exit do : end if
                 end do
             'end if 
            'else
             ' goto start
            end if           
         'END IF

         'exec_While----------------------------------------------------------------------------
         'IF tok = tkWHILE
	case tkWHILE
         ' print "RES-WHILE:" + str(resWhile)  
           whilePos = whileID[tc] ': print "WHILE-POS:" + str(whilePos )                              'get last whileID from token pos
           gettok(): tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                                'get (1)
		   If vTyp = tkFLOAT  
               vID = varList[tc] : fop1 = varNum[vID]                                                                     'op1
               tc++ : gettok() : tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                     'skip cond1      
               If vTyp = tkFLOAT :  vID = varList[tc] : fop2 = varNum[vID] :End if                                        'get (2) 
               If tok = tkNUMBER : fop2 = val(tokList[tc]) : end if                   
               if vTyp <> tkFLOAT AND tok <> tkNUMBER: MsgBox "Wrong Type! " + token ,"ERROR":goto ExitProgram : end if   'wrong type
                tc=tc-2 : gettok() : tok = tkTyp                                                                           'get cond1 back(-2),gt(+1)
                    'If ntok <> tkAND or ntok <> tkOR
                       resWhile = vNO 
                       Select tok
                          Case tkLESS
                             if fop1 < fop2 : resWhile = vYES : end if              
                          Case tkMORE
                             if fop1 > fop2 : resWhile = vYES : end if 
                          Case tkEQUAL
                             if fop1 = fop2 : resWhile = vYES : end if
                          Case tkNOT
                            if fop1 <> fop2 : resWhile = vYES : end if
                        End select
                    cond1 = resWhile
		   End If
            ' shift tc>> = skip var after operator [op] [var] >> 
           tc=tc+2 ': print ">>TOKEN:" + tokList[tc] + ">TC: " + str(tc)
       IF typList[tc] <> tkAND AND typList[tc] <> tkOR : goto update_while_stack : end if     'if there is no AND or OR then jump over
       IF typList[tc] = tkAND : logOP = tkAND : END IF                                        'if logical operator is AND / &
       IF typList[tc] = tkOR  : logOP = tkOR  : END IF                                        'if logical operator is OR  / |
            gettok(): tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                                'get ar(3)
		   If vTyp = tkFLOAT  
               vID = varList[tc] : fop3 = varNum[vID]                                                                     'op2
               tc++ : gettok() : tok = tkTyp : vID = varList[tc]: vTyp = varType[vID]                                     'skip cond2      
               If vTyp = tkFLOAT :  vID = varList[tc] : fop4 = varNum[vID] :End if                                        'get (3) 
               If tok = tkNUMBER : fop4 = val(tokList[tc]) : end if                   
               if vTyp <> tkFLOAT AND tok <> tkNUMBER: MsgBox "Wrong Type! " + token ,"ERROR":goto ExitProgram : end if   'wrong type
                tc=tc-2 : gettok() : tok = tkTyp                                                                          'get cond2 back(-2),gt(+1)
                    'If ntok <> tkAND or ntok <> tkOR
                       resWhile = vNO 
                       Select tok
                          Case tkLESS
                             if fop3 < fop4 : resWhile = vYES : end if              
                          Case tkMORE
                             if fop3 > fop4 : resWhile = vYES : end if 
                          Case tkEQUAL
                             if fop3 = fop4 : resWhile = vYES : end if
                          Case tkNOT
                            if fop3 <> fop4 : resWhile = vYES : end if
                        End select
                    cond2 = resWhile
		   End If
            tc=tc+2 'skip var after operator [op] [var] >> 
            update_while_stack:  '<-label
              
               /* update stack values                 +1                      */
               whileTOS = whileTOS + 1 
	          whileStack[whileTOS] = whilePos    '52,  TOS=2- 52 , 1-52
              wcount = 1 
            '-----------------------------------------------------------------------------
            IF logOP = tkAND                         
              IF cond1 = vYES AND cond2 = vYES : resWhile = vYES : end if ' check cond
              IF cond1 = vNO  AND cond2 = vNO  : resWhile = vNO  : end if
              IF cond1 = vYES AND cond2 = vNO  : resWhile = vNO  : end if
              IF cond1 = vNO  AND cond2 = vYES : resWhile = vNO  : end if
            END IF
            '-----------------------------------------------------------------------------
            IF logOP = tkOR
              IF cond1 = vYES OR cond2 = vYES : resWhile = vYES : end if 
              IF cond1 = vYES OR cond2 = vNO  : resWhile = vYES : end if 
              IF cond1 = vNO  OR cond2 = vYES : resWhile = vYES : end if 
              IF cond1 = vNO  OR cond2 = vNO  : resWhile = vNO  : end if
            END IF
            '------------------------------------------------------------------------------

            if resWhile = vNO 
             whileTOS = whileTOS - 1  
                     		        
               do           ' jump beyond WEND
                 tc++ 
                 if typList[tc] = tkWHILE : wcount++ : end if         ' if found a WHILE statement, count it
			   if typList[tc] = tkWEND                              ' if found an WEND statement...
                    wcount--
                    if wcount = 0 : exit do : end if                  ' if found the one we want...
                 end if                
               end do
                tc++   ' skip wend and get EOL
                 'print "TOKEN>>" + tokList[tc] + ">TC: " + str(tc)                
            end if
            
          'exec wend if vYES..................................................................
	case tkWEND
        ' if resWhile = vYES 
           'print "TRUE ->jump back to WHILE"
           'if whileTOS
	       tc = whileStack[whileTOS]-1 ': print "WEND TO->POS:" + str(tc) 
	       /* unload WHILE stack, which will be reloaded by the call to WHILE */
	       whileTOS = whileTOS - 1 ' TOS-1 ->1 -> 0         	      
         'end if

           		   
        'END IF
	case tkGOTO
         'exec_GOTO------------------------
         'IF tok = tkGOTO
            gettok() : tok = tkTyp
            'If tok = tkIDENT
               'print "LABEL_POS:" + str(gotoID[tc])
                tc = gotoID[tc]  ' jump to label pos
                goto start
           ' End if

         'END IF 
	case tkWCOLOR
         'exec_window color -------------------------
         'IF tok = tkWCOLOR
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : winRed = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : winRed = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : winGreen = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : winGreen = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : winBlue = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : winBlue = varNum[vID] : end if
            End if 
            'set window color
            WinColor( win, winRed, winGreen, winBlue) 

         'END IF

	case tkFCOLOR
         'exec front color -------------------------
         'IF tok = tkFCOLOR
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : frontRed = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : frontRed = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : frontGreen = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : frontGreen = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : frontBlue = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : frontBlue = varNum[vID] : end if
            End if 
            'set front color
             fColor = RGB( frontRed, frontGreen, frontBlue)
              SetTextColor( hDCMem, fColor) 
             'SetBkColor( hDCMem, bColor)
 
        
     case tkBCOLOR
         'exec front color -------------------------
         'IF tok = tkBCOLOR
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : backRed = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : backRed = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : backGreen = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : backGreen = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : backBlue = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : backBlue = varNum[vID] : end if
            End if 
            'set front color
            bColor = RGB(backRed, backGreen, backBlue) :' SetBkMode( hDCMem, 1) 
             SetBkColor( hDCMem, bColor) ': SetTextColor( hDCMem, fColor) 
            
        

	case tkLINE
         'exec_line -------------------------
         'IF tok = tkLINE
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : lineX1 = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : lineX1 = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : lineY1 = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : lineY1 = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : lineX2 = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : lineX2 = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : lineY2 = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : lineY2 = varNum[vID] : end if
            End if 
            'draw line x,y -> x1,y1
            'DrawLine( win, piX, piY, piZ, piQ)
			np = CreatePen(PS_SOLID,1,fColor)
			op = SelectObject(hdcMem, np)
			MoveToEx hdcMem, lineX1, lineY1,Byval 0
			LineTo hdcMem, lineX2, lineY2
			'BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
			DeleteObject(op)
			'int hPen = GetStockObject(DC_PEN)
             'SelectObject(hdcMem, hPen)
            ReleaseDC( win, hdc)
         'END IF
 
	case tkRECT
         'exec_rectangle -------------------------
         'IF tok = tkRECT
            gettok() : tok = tkTyp 
            If tok = tkNUMBER : piX = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : piX = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : piY = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : piY = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : piZ = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : piZ = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : piQ = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : piQ = varNum[vID] : end if
            End if 
            'draw rect x,y -> x1,y1
            DrawRect( win, piX, piY, piZ, piQ)

	case tkLOADIMG
		'exec img = LoadImage(0, "micData\icOpen.ico", 1, 32, 32, 24)  ...load icon
      'syntax-> LoadImg (1)hImg , (3)str "img.bmp" ,(5)imgType , (7)w , (9)h, (11)colorFlags
         gettok() : tok = tkTyp                                         
            If tok = tkIDENT                                      'arg(1)
               vID = varList[tc] : vTyp = varType[vID] : htc = tc
               if vTyp = tkPOINTER : hImg = varPtr[vID] : end if    'read value from list
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(2)
            if tok = tkQSTRING  : strRes = tokList[tc] : End if   'if is quoted
            If tok = tkIDENT                                      'if is strVar                                                  
              vID = varList[tc] : vTyp = varType[vID]          
              if vTyp = tkSTRING : strRes =  varStr[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(3)
            If tok = tkNUMBER : imgType = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgType= varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(4)w
            If tok = tkNUMBER : imgW = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgW= varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(5)h
            If tok = tkNUMBER : imgH = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgH= varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(6)cFlag
            If tok = tkNUMBER : cFlag = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : cflag= varNum[vID] : end if
            End if
            'load image and return handler hImg
            hImg = LoadImage(0, strRes, imgType, imgW, imgH, cFlag)
            'store handler to var array
             vID = varList[htc] : vTyp = varType[vID]
             if vTyp = tkPOINTER : varPtr[vID] = hImg : end if
             'store image id into array ...max id 64
             if imageID < 64
                imageID = imageID + 1
                imgID[vID] = imageID
                imgHDC[imageID] = CreateCompatibleDC(0)
                SelectObject( imgHDC[imageID], hImg)
             end if

	case tkSHOWIMG
         'syntax -> ShowImg himg(ptr),x,y,w,h              
		gettok() : tok = tkTyp                                         
            If tok = tkIDENT                                      'arg(1)
               vID = varList[tc] : vTyp = varType[vID]            'must be INT type(ptr)
               if vTyp = tkPOINTER 
                    'hImg = varPtr[vID] : 'print "hImage:" + str(hImg)
                   ' intImg = hImg
                   '    iID = imgID[vID]  'get image id
               end if    
            End if 
		   tc++ : gettok() : tok = tkTyp                         'arg(2)
            If tok = tkNUMBER : imgX = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgX = varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(3)w
            If tok = tkNUMBER : imgY = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgY = varNum[vID] : end if
            End if
             tc++ : gettok() : tok = tkTyp                         'arg(4)
            If tok = tkNUMBER : imgW = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgW = varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(5)w
            If tok = tkNUMBER : imgH = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgH = varNum[vID] : end if
            End if

		   'add img to hdc
		  hdcImg = imgHDC[iID] : ' print "MEM_HDC:" + str(hdcimg)
           'bmpMem = CreateCompatibleBitmap(hdcImg, imgw,imgh)
           'int bmp1 = SelectObject(hdcImg, bmpMem) : print "selected_bitmap:"+ str(bmp1)
		  selBmp  = SelectObject(hdcImg, intImg) : ' print "selected:image:"+ str(selBmp)
            'copy imgHDC to memHDC
		   'BitBlt(hDCMem, imgX, imgY, imgW, imgH, hdcImg, 0, 0, SRCCOPY)
		    'InvalidateRect(win, 0, 0)  ' show image            
            'BitBlt(hDCMem, imgX, imgY, imgW, imgH, hdcImg, 0, 0, SRCCOPY)
            TransparentBlt (hDCMem, imgX, imgY, imgW, imgH, hdcImg, 0, 0, imgW, imgH, 0)

	case tkSHOWIMGT
         'syntax -> ShowImgT himg(ptr),x,y,w,h   transparent blit           
		gettok() : tok = tkTyp                                         
            If tok = tkIDENT                                      'arg(1)
               vID = varList[tc] : vTyp = varType[vID]            'must be INT type(ptr)
               if vTyp = tkPOINTER 
                    hImg = varPtr[vID] : 'print "hImage:" + str(hImg)
                    intImg = hImg
                    iID = imgID[vID]  'set image id variable
               end if    
            End if 
		   tc++ : gettok() : tok = tkTyp                         'arg(2)
            If tok = tkNUMBER : imgX = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgX = varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(3)w
            If tok = tkNUMBER : imgY = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgY = varNum[vID] : end if
            End if
             tc++ : gettok() : tok = tkTyp                         'arg(4)
            If tok = tkNUMBER : imgW = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgW = varNum[vID] : end if
            End if 
            tc++ : gettok() : tok = tkTyp                         'arg(5)w
            If tok = tkNUMBER : imgH = val(tokList[tc]) : End if                                         
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : imgH = varNum[vID] : end if
            End if

		   'get imgid to get img hdc
		   hdcImg = imgHDC[iID]
		  
            'copy imgHDC to memHDC
		 ' BitBlt(hDCMem, imgX, imgY, imgW, imgH, hdcImg, 0, 0, SRCCOPY)
		   'update image            
            TransparentBlt (hDCMem, imgX, imgY, imgW, imgH, hdcImg, 0, 0, imgW, imgH, 0)
            

		 'exec circle -------------------------
	case tkCIRCLE
		 gettok() : tok = tkTyp 
            If tok = tkNUMBER : piX = val(tokList[tc]) : End if                                        'if number 
            If tok = tkIDENT
               vID = varList[tc] : vTyp = varType[vID] 
               if vTyp = tkFLOAT : piX = varNum[vID] : end if 
            End if                          
            'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : piY = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : piY = varNum[vID] : end if
            End if 
             'tc++                                                                                      'skip comma
            tc++ : gettok() : tok = tkTyp 
            If tok = tkNUMBER : cra = val(tokList[tc]) : End if                                         'if number 
            If tok = tkIDENT 
              vID = varList[tc] : vTyp = varType[vID]
              if vTyp = tkFLOAT : cra = varNum[vID] : end if
            End if 

		 'Circle (win,piX,piY,piZ)
           '-----------------------------------------------
          SetBkMode( hDCMem, 1) 'transparent
		'SetBkColor(hDC, RGB(220,220,250))
		np = CreatePen(PS_SOLID,1,fColor)  'new pen
		op = SelectObject(hdcMem, np)
		nB = CreateSolidBrush( bColor)   'new Brush
		oB = SelectObject(hdcMem, nB)

		Ellipse hdcMem,piX-cra,piY-cra,cra+piX,cra+piY

		'BitBlt(hDCmem, 0, 0, ww, wh, hdc, 0, 0, SRCCOPY)
       'TransparentBlt (hDC, 0, 0, ww, wh, hdcMem, 0, 0, ww, wh, 0)  
	       DeleteObject(SelectObject(hdcMem, op))
	        DeleteObject(SelectObject(hdcMem, oB))
		   ReleaseDC( win, hdc)
         '----------------------------------------------------
     
	case else
         'peekmsg
          if PeekMessage (wm,0,0,0,Pm_Remove)>0 ' //peek 
           'iF wm.message = WM_QUIT : DeleteDC(hdc) : end if
           TranslateMessage (wm)
           DispatchMessage (wm)
         end if
     
	End Select

    Wend

End Sub
'=================================================================================================================
'-----------------------------------------------------
sub gettok()
tc++
token = tokList[tc] : tkTyp = typList[tc] 
'test
if tokList[tc+1] <> "" then return
end sub
'----------------------------------------------------
sub expr() as float
float v
If token = "-" 
 v = -(term())
else
 v = term()
end if 
 
while token = "+" or token = "-"
if token = "+": gettok() : v = v + term(): end if
if token = "-": gettok() : v = v - term(): end if
wend

return v
end sub
'---------------------------------------------------
sub term() as float
float v 
v = factor()

while token = "*" or token = "/" or token = "%" or token="^"
if token = "*": gettok() : v = v * factor(): end if
if token = "/": gettok() : v = v / factor(): end if
if token = "%": gettok() : v = v \ factor(): end if
if token = "^": gettok() : v = v ^ factor(): end if
wend

return v
end sub 
'-------------------------------------------------------

sub factor() as float
float v,tmp : int vID, vTyp
if asc(token)>47  and asc(token)<58 'nums
v = val(token) 
gettok()
end if

if asc(token)=40 and asc(token)<>41 'match (...)
gettok() : v = expr() : gettok()
end if

if tkTyp = tkIDENT
'gettok()
vID = varList[tc]  : vTyp = varType[vID] : ' print "token->"+ token +" var_ID:" + str(vID) + "_varType: " + str(vTyp)
IF vTyp = tkFLOAT   : v = varNum[vID] : end if
IF vTyp = tkPOINTER : v = varPtr[vID] : end if
 gettok()
End if

 'vID = varList[tc]  : vTyp = varType[vID] 
If tkTyp = tkRND   : gettok() : v = RndFn(factor())  : End if 
If tkTyp = tkSIN   : gettok() : v = sin(factor())    : End if
If tkTyp = tkCOS   : gettok() : v = cos(factor())    : End if
If tkTyp = tkTAN   : gettok() : v = tan(factor())    : End if
If tkTyp = tkRAND  : gettok() : v = RandFn(factor()) : End if
If tkTyp = tkABS   : gettok() : v = abs(factor())    : End if
If tkTyp = tkATAN  : gettok() : v = atn(factor())    : End if
If tkTyp = tkSQR   : gettok() : v = sqr(factor())    : End if
If tkTyp = tkLOG   : gettok() : v = log(factor())    : End if
If tkTyp = tkROUND : gettok() : v = round(factor())  : End if
If tkTyp = tkINT   : gettok() : v = int(factor())    : End if
If tkTyp = tkFRAC  : gettok() : v = frac(factor())   : End if

If tkTyp = tkSTRING and tkTyp <> tkPOWUP
   MsgBox "Not Numeric! -{ " + token +" }","TYPE ERROR": goto ExitProgram
End if


return v
end sub

'execute numeric expression----------------------------------------------
Sub exec_expr() as float
gettok()'start
float res = expr() 
'MsgBox "RESULT=" + str(res) , "EXEC_EXPR:"
'TextOn (win,30,30, str(res))
Return res
End sub 

' execute string expression---------------------------------------------
Sub exec_strExpr() as string
gettok() 'start
string res 
res = strExpr()
'MsgBox "STR_RESULT=" + res , "EXEC_STR_EXPR:"
'TextOn (win,30,60, res)
Return res
End sub

'----------------------------------------------------------------------
Sub strExpr() as string
string vs

if token <> "+"
vs = strFactor()
end if

while token = "+"
if token = "+": gettok() : vs = vs + strFactor(): end if
wend

Return vs
End Sub

'---------------------------------------------------------------------
Sub strFactor() as string
string vs,tmpstr: int vID, vTyp ,tmpSize,tmpPos

if tkTyp = tkIDENT  'str variable
  vID = varList[tc]  : vTyp = varType[vID] :' print "token->"+ token +" var_ID:" + str(vID) + "_varType: " + str(vTyp)
  IF vTyp = tkSTRING 
    vs = varStr[vID] : gettok()
  End if
end if
  'str$
  If tkTyp = tkSTRS : gettok(): vs = str(expr()) : End if
  
  'left$( str,size)
  If tkTyp = tkLEFTSTR : gettok() :' print "TOK:" + token
      gettok() :'  print "TOK2:" + token
      vID = varList[tc]  : vTyp = varType[vID]
      IF vTyp = tkSTRING 
          tmpstr = varStr[vID] :' print "stringVar:" + tmpstr
      END IF
      gettok()
      IF tkTyp = tkCOMMA 
            'print "is_comma"
            gettok()
            vID = varList[tc]  : vTyp = varType[vID]
            IF tkTyp = tkNUMBER : tmpSize = val(token)  : end if
            IF vTyp = tkFLOAT   : tmpSize = varNum[vID] : end if
            IF vTyp = tkPOINTER : tmpSize = varPtr[vID] : end if 
            'print "StrSIZE:" + str(tmpSize)
            gettok()
            vs = left(tmpstr,tmpSize)
            Return vs
      END IF
  End if
   
  'right$(str,size)
  If tkTyp = tkRIGHTSTR : gettok() :' print "TOK:" + token
      gettok() :'  print "TOK2:" + token
      vID = varList[tc]  : vTyp = varType[vID]
      IF vTyp = tkSTRING 
          tmpstr = varStr[vID] :' print "stringVar:" + tmpstr
      END IF
      gettok()
      IF tkTyp = tkCOMMA 
            'print "is_comma"
            gettok()
            vID = varList[tc]  : vTyp = varType[vID]
            IF tkTyp = tkNUMBER : tmpSize = val(token)  : end if
            IF vTyp = tkFLOAT   : tmpSize = varNum[vID] : end if
            IF vTyp = tkPOINTER : tmpSize = varPtr[vID] : end if 
            'print "StrSIZE:" + str(tmpSize)
            gettok() ': print "TOK-RSTR:" + token
            vs = RightS(tmpstr,tmpSize)
            Return vs
      END IF
  End if

  'mid$(str,pos,len)
  If tkTyp = tkMIDSTR : gettok() ': print "TOK1:" + token
      gettok() ':  print "TOK2:" + token
      vID = varList[tc]  : vTyp = varType[vID]
      IF vTyp = tkSTRING 
          tmpstr = varStr[vID] :' print "stringVar:" + tmpstr
      END IF

      gettok() ':  print "TOK3:" + token

      IF tkTyp = tkCOMMA 
            gettok() ':  print "TOK4:" + token
            vID = varList[tc]  : vTyp = varType[vID]
            IF tkTyp = tkNUMBER : tmpPos = val(token)  : end if
            IF vTyp = tkFLOAT   : tmpPos = varNum[vID] : end if
            IF vTyp = tkPOINTER : tmpPos = varPtr[vID] : end if           
      END IF

      gettok() ':  print "TOK5:" + token

	  IF tkTyp = tkCOMMA
          gettok() ':  print "TOK6:" + token
                vID = varList[tc]  : vTyp = varType[vID]
                IF tkTyp = tkNUMBER : tmpSize = val(token)  : end if
                IF vTyp = tkFLOAT   : tmpSize = varNum[vID] : end if
                IF vTyp = tkPOINTER : tmpSize = varPtr[vID] : end if            
                gettok() ': print "TOK7:" + token
               vs = mid(tmpstr,tmpPos,tmpSize)
              Return vs
       END IF           
      
  End If



If tkTyp = tkNUMBER 
   MsgBox "Not String! -{ " + token +" }","TYPE ERROR": goto ExitProgram
end if

if tkTyp = tkQSTRING ' quoted string
vs = token :  gettok()
end if

Return vs
End Sub

'================================================================
' GDI WINDOW FUNCTIONS
'================================================================
'print on window
SUB TextOn(wID as INT,tx as INT,ty as INT,txt as string)
'hdc = GetDC(wID)
'draw text to screen DC
TextOut hdcMem,tx,ty,txt,Len(txt)
'blit screen DC to memDC-------------------------
'BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)

ReleaseDC( wID, hdc)
END SUB

'set pixel on window............................................
SUB PixelOn (wID as int , px as int ,py as int)
'hdc = GetDC(wID)
'fColor = rgb(0,0,0)
'GetSize(wID,0,0,ww,hh)
SetPixel ( hdcMem, px, py, fColor)
'blit screen DC to memDC
'BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)

ReleaseDC( wID, hdc)
END SUB
'draw line ........................................................
SUB DrawLine(wID as INT,byval x as INT,byval y as INT,byval x1 as INT,byval y1 as INT)
'hdc = GetDC(wID)
'GetSize(wID,0,0,ww,hh)
'SelectObject(hdc, CreatePen(PS_SOLID,1,fColor))
'fcolor = rgb(0,0,0)
 np = CreatePen(PS_SOLID,1,fColor)
 op = SelectObject(hdcMem, np)

MoveToEx hdcMem,x,y,Byval 0
LineTo hdcMem,x1,y1

BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
DeleteObject(SelectObject(hdcMem, op))
'ReleaseDC( wID, hdcMem)

END SUB
'draw circle..................................................................................
SUB Circle (wID as INT,byval cix as INT,byval ciy as INT,byval cra as INT)
'hdc = GetDC(wID)
'GetSize(wID,0,0,ww,hh)
'SelectObject(hdc, CreatePen(PS_SOLID,1,fColor))

'SetBkMode( hDC, 1) 'transparent
'SetBkColor(hDC, RGB(220,220,250))
'np = CreatePen(PS_SOLID,1,fColor)  'new pen
'op = SelectObject(hdc, np)
'nB = CreateSolidBrush( bColor)   'new Brush
'oB = SelectObject(hdc, nB)

'Ellipse hdc,cix-cra,ciy-cra,cra+cix,cra+ciy

'BitBlt(hDCmem, 0, 0, ww, wh, hdc, 0, 0, SRCCOPY)
'DeleteObject(SelectObject(hdc, op))
'DeleteObject(SelectObject(hdc, oB))
'ReleaseDC( wID, hdc)
'
'Sub Oval(sys x,y,ra,rb, r,g,b)
    sys iPen,iBrush
    'bColor = r + g*256 + b*65536 
    iBrush = CreateSolidBrush (bColor)
    iPen = CreatePen(PS_SOLID,1,fColor)  'new pen
    SelectObject Hdcmem, iPen
    SelectObject Hdcmem, iBrush
    Ellipse Hdcmem,cix-cra,ciy-cra,cra+cix,cra+ciy
    'DeleteObject iPen :  DeleteObject iBrush
    
   'ReleaseDC( wID, hdcMem)
'End Sub

End SUB

'draw rectangle................................................................................
SUB DrawRect (wID as INT,byval rx1 as INT,byval ry1 as INT,byval rx2 as INT,byval ry2 as INT)
'hdc = GetDC(wID)
'GetSize(wID,0,0,ww,hh)

SetBkMode( hDC, 1) 'transparent
SetBkColor(hDC, RGB(0,0,0))
np = CreatePen(PS_SOLID,1,fColor)  'new pen
op = SelectObject(hdcMem, np)
nB = CreateSolidBrush( bColor)   'new Brush
oB = SelectObject(hdcMem, nB)
'Rectangle bHdc,x,y,w+x,h+y ...hmmm
Rectangle (hdcMem,rx1,ry1,rx2+rx1,ry2+ry1)

'BitBlt(hDCmem, 0, 0, ww, wh, hdc, 0, 0, SRCCOPY)
DeleteObject(SelectObject(hdcMem, op))
DeleteObject(SelectObject(hdcMem, oB))
ReleaseDC( wID, hdc)
END SUB
' front color / frontpen...................................................................
SUB FrontColor (wID as INT, penr as INT, peng as INT, penb as INT)
    'INT ww,hh : GetSize(wID,0,0,ww,hh)
    'hdc = GetDC(wID)
    fColor = RGB (penr,peng,penb)
    SetTextColor( hDCMem, fColor)
    SetBkColor( hDCmem, bColor)

    BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
    'int np = CreatePen(PS_SOLID,1,Color)  'new Pen color
    'int op = SelectObject(hdc, np)
    'DeleteObject(SelectObject(hdc, op))
    ReleaseDC( wID, hdc)
END SUB

'set window color...............................................
SUB WinColor(wID as INT,wr as INT,wg as INT,wb as INT)
int backColor = RGB (wr,wg,wb)
FillSolidRect(wID,0,0,ww,wh,backColor)
END SUB
'..............................................................

Sub FillSolidRect(wID as INT, x As INT, Y As INT, cx As INT, cy As INT, bbColor as int) 
    INT hBr,oBr ' rc As RECT 
    hDC=GetDC(wID)
    rc.Left = x 
    rc.Top = Y 
    rc.right = x + cx 
    rc.bottom = Y + cy 
    hBr = CreateSolidBrush(bbColor)
    oBr = SelectObject hdcMem,hBr
    FillRect hDCMem, rc, hBr 
    DeleteObject hBr
    BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
    DeleteObject(SelectObject(hdcMem, oBr))
    ReleaseDC( wID, hdc) 
End Sub 
'------------------------------------------------------------------------
Sub WindowFont(int height, width, flag, string fontname)  
int hFont
'hDC=GetDC(win)
ReleaseDC( win, hdcMem)
'SelectObject hdcMem, hFont
hFont = CreateFont height,width,0,0,flag,0,0,0,0,0,0,0,0,fontname
SelectObject hdcMem, hFont
'without SetBkMode BCOLOR r,g,b,.. work ?
SetBkMode hdcMem,1

'BitBlt(hDC, 0, 0, ww, wh, hdcMem, 0, 0, SRCCOPY)
DeleteObject hFont
'ReleaseDC( win, hdcMem)
End Sub
'================================================================
' INIT GDI WINDOW DRAWING
'================================================================
SUB InitDraw(byval wnd as INT)
''get current size of window
ww = w : wh = h    'set sizes to window w,h
GetSize(wnd,0,0,ww,wh)
'print "window size:ww,wh:" + str(ww) +"--" + str(wh)
'get window DC
hdc=GetDC(wnd)
hdcMem = CreateCompatibleDC(hdc)
hbmMem = CreateCompatibleBitmap(hdc,ww,wh)
oldBmp = SelectObject( hdcMem, hbmMem )
oldBrush = SelectObject(hdcMem, CreateSolidBrush( RGB(255,255,255)) )
oldPen = SelectObject(hdcMem, CreatePen(PS_SOLID,1,RGB(255,255,255)))
'fill rectangle memDC with brush color
rc.right = ww
rc.bottom = wh 

FillRect ( hdcMem,rc, oldBrush) 
SetTextColor( hDC,RGB(0,0,0))
SetBkColor( hDC, RGB(255,255,255))
'blit to memDC
BitBlt(hDCmem, 0, 0, ww, wh, hdc, 0, 0, SRCCOPY)
DeleteObject oldBmp
DeleteObject oldBrush
DeleteObject oldPen
'UpdateWindow wnd
ReleaseDC( wnd, hdc)
End SUB

'================================================================
' MATH FUNCTIONS
'================================================================

'Rnd Function(0->1).......................
SUB RndFn(float d) as float
d=1/0x7fffffff
fseed=(fseed <<< 7)*13
Return abs(d*fseed)
END SUB
'Rand function (0,max)...................
Function RandFn(float randMax) as float
float fRet
fRet = Rand(0,randMax)
Return fRet
End Function
